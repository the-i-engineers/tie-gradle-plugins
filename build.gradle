plugins {
    id 'java-gradle-plugin'
    id 'jacoco'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.19.0'
    id 'org.sonarqube' version '3.3'
}

group 'ch.tie.gradle.plugins'

sonarqube {
    properties {
        property "sonar.projectKey", "the-i-engineers_${project.name}"
        property "sonar.organization", "the-i-engineers"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.coverage.jacoco.xmlReportPaths", "**/build/reports/jacoco/test/jacocoTestReport.xml"
    }
}


gradlePlugin {
    plugins {
        json2mdPlugin {
            id = 'ch.tie.gradle.plugins.json2md'
            displayName = 'Json2md'
            description = "generates a markdown file from 'spring-configuration-metadata.json' to document your configuration properties"
            implementationClass = 'ch.tie.gradle.plugins.json2md.Json2mdPlugin'
            version = '1.5.0'
        }
    }
}

pluginBundle {
    website = 'https://github.com/the-i-engineers/tie-gradle-plugins'
    vcsUrl = 'https://github.com/the-i-engineers/tie-gradle-plugins.git'
    tags = ['the i-engineers', 'e-health', 'java', 'spring', 'automation', 'documentation']
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.0'
    implementation 'commons-io:commons-io:2.19.0'
    implementation "org.apache.commons:commons-lang3:3.17.0"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.1'
}

compileJava {
    options.encoding = 'UTF-8'
    options.warnings = true
    options.deprecation = true
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = false
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    include '**/*Test.class'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) // use jdk17 for backwards compatibility
    }
}
